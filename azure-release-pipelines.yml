variables:
  imobiledevicenetBuild: 419
  imobiledevicenetPipeline: 1

jobs:
- job: nuget_deploy
  pool:
    vmImage: 'VS2017-Win2016'
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      project: 'imobiledevice-net'
      pipeline: $(imobiledevicenetPipeline)
      buildVersionToDownload: 'specific'
      buildId: $(imobiledevicenetBuild)
      downloadType: 'single'
      artifactName: 'imobiledevice-net'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Download imobiledevice-net artifacts'
  - task: NuGetCommand@2
    continueOnError: true
    inputs:
      command: push
      packagesToPush: '$(System.ArtifactsDirectory)\imobiledevice-net\iMobileDevice-net.*.nupkg'
      publishFeedCredentials: 'NuGet'
      nuGetFeedType: external

- job: deploy
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      project: 'imobiledevice-net'
      pipeline: $(imobiledevicenetPipeline)
      buildVersionToDownload: 'specific'
      buildId: $(imobiledevicenetBuild)
      downloadType: 'single'
      artifactName: 'imobiledevice-net'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Download imobiledevice-net artifacts'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      project: 'imobiledevice-net'
      pipeline: $(imobiledevicenetPipeline)
      buildVersionToDownload: 'specific'
      buildId: $(imobiledevicenetBuild)
      downloadType: 'single'
      artifactName: 'binaries'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Download binary artifacts'
  - script: |
      wget https://github.com/buildkite/github-release/releases/download/v1.0/github-release-linux-amd64 -O github-release
      chmod +x github-release

      sudo apt-get install -y libxml2-utils

      unzip $SYSTEM_ARTIFACTSDIRECTORY/imobiledevice-net/iMobileDevice-net.*.nupkg

      libplist_commit=`cat libplist.gitinfo/gitinfo | tail -n 1`
      libusbmuxd_commit=`cat libusbmuxd.gitinfo/gitinfo | tail -n 1`
      libimobiledevice_commit=`cat libimobiledevice.gitinfo/gitinfo | tail -n 1`
      usbmuxd_commit=`cat usbmuxd.gitinfo/gitinfo | tail -n 1`
      libideviceactivation_commit=`cat libideviceactivation.gitinfo/gitinfo | tail -n 1`
      imobiledevice_net_commit=$BUILD_SOURCEVERSION
      version_number=`xmllint --xpath 'Project/PropertyGroup/MobileDeviceDotNetNuGetVersion/text()' $SYSTEM_ARTIFACTSDIRECTORY/imobiledevice-net/Directory.Build.props`

      echo Releasing $version_number

      ./github-release "v$version_number" --commit "$libplist_commit" --github-repository "libimobiledevice-win32/libplist"
      ./github-release "v$version_number" --commit "$libusbmuxd_commit" --github-repository "libimobiledevice-win32/libusbmuxd"
      ./github-release "v$version_number" --commit "$libimobiledevice_commit" --github-repository "libimobiledevice-win32/libimobiledevice"
      ./github-release "v$version_number" --commit "$usbmuxd_commit" --github-repository "libimobiledevice-win32/usbmuxd"
      ./github-release "v$version_number" --commit "$libideviceactivation_commit" --github-repository "libimobiledevice-win32/libideviceactivation"
      ./github-release "v$version_number" $SYSTEM_ARTIFACTSDIRECTORY/imobiledevice-net/iMobileDevice-net.*.nupkg $SYSTEM_ARTIFACTSDIRECTORY/binaries/*.zip --commit "$imobiledevice_net_commit" --github-repository "libimobiledevice-win32/imobiledevice-net"
    displayName: Tag GitHub releases

- job: docker
  strategy:
    maxParallel: 5
    matrix:
      xenial:
        SUFFIX:
        NAME: xenial
      xenial-arm64:
        SUFFIX: -arm64
        NAME: xenial-arm64
      bionic:
        SUFFIX: -bionic
        NAME: bionic
      bionic-arm64:
        SUFFIX: -bionic-arm64
        NAME: bionic-arm64
      alpine:
        SUFFIX: -alpine
        NAME: alpine
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      project: 'imobiledevice-net'
      pipeline: $(imobiledevicenetPipeline)
      buildVersionToDownload: 'specific'
      buildId: $(imobiledevicenetBuild)
      downloadType: 'single'
      artifactName: 'imobiledevice-net'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Download imobiledevice-net artifacts'
  - script: |
      sudo apt-get install -y libxml2-utils
      docker run --rm --privileged multiarch/qemu-user-static:register --reset

      version_number=`xmllint --xpath 'Project/PropertyGroup/MobileDeviceDotNetNuGetVersion/text()' $SYSTEM_ARTIFACTSDIRECTORY/imobiledevice-net/Directory.Build.props`

      echo Releasing $version_number

      git clone https://github.com/libimobiledevice-win32/docker

      docker build docker/$NAME/ -t quamotion/usbmuxd:$version_number$SUFFIX --build-arg LIBIMOBILEDEVICE_WIN32_VERSION=v$version_number

      docker tag quamotion/usbmuxd:$version_number$SUFFIX quamotion/usbmuxd:latest$SUFFIX

      docker login -u="$DOCKER_USER" -p="$DOCKER_PASS"

      docker push quamotion/usbmuxd:$version_number$SUFFIX
      docker push quamotion/usbmuxd:latest$SUFFIX

    displayName: Build Docker containers

- job: ppa
  strategy:
    maxParallel: 4
    matrix:
      xenial:
        DIST: xenial
      bionic:
        DIST: bionic
      precise:
        DIST: precise
      trusty:
        DIST: trusty
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      project: 'imobiledevice-net'
      pipeline: $(imobiledevicenetPipeline)
      buildVersionToDownload: 'specific'
      buildId: $(imobiledevicenetBuild)
      downloadType: 'single'
      artifactName: 'sources'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Download sources'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      project: 'imobiledevice-net'
      pipeline: $(imobiledevicenetPipeline)
      buildVersionToDownload: 'specific'
      buildId: $(imobiledevicenetBuild)
      downloadType: 'single'
      artifactName: 'imobiledevice-net'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Download imobiledevice-net artifacts'
  - script: |
      sudo apt-get install -y libxml2-utils devscripts debhelper dh-autoreconf dput
    displayName: 'Install dependencies'
  - script: |
      mkdir -p  ~/.gnupg/
      echo allow-loopback-pinentry > ~/.gnupg/gpg-agent.conf
      gpg --allow-secret-key-import --import $BUILD_SOURCESDIRECTORY/ppa.asc
      killall gpg-agent
      echo "${GPG_PASSPHRASE}" >> /tmp/gpg_passphrase
    displayName: 'Configure GPG'
  - script: |
      set -e
      version_number=`xmllint --xpath 'Project/PropertyGroup/MobileDeviceDotNetNuGetVersion/text()' $SYSTEM_ARTIFACTSDIRECTORY/imobiledevice-net/Directory.Build.props`

      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/deb/

      export DEBEMAIL="frederik.carlier@quamotion.mobi"
      export DEBFULLNAME="Frederik Carlier"

      cd $SYSTEM_ARTIFACTSDIRECTORY/sources/

      declare -A package_versions
      package_versions=( ["libplist"]="2.0.2" ["libusbmuxd"]="1.12.0" ["libimobiledevice"]="1.2.2" ["usbmuxd"]="1.1.2" ["libideviceactivation"]="1.0.1")

      for package in libplist libusbmuxd libimobiledevice usbmuxd libideviceactivation
      do
          package_version=${package_versions[$package]}
          mkdir $package
          tar xvf $package.orig.tar.gz -C $package
          mv $package.orig.tar.gz ${package}_${package_version}-${version_number}.orig.tar.gz
          cd $package

          dch -v "${package_version}-${version_number}-0$DIST" --distribution $DIST "imobiledevice-net ${version_number}"

          debuild -S -k5314912C -p"$BUILD_SOURCESDIRECTORY/gpg-pass.sh /tmp/gpg_passphrase"
          cp ../${package}_${package_version}* $BUILD_ARTIFACTSTAGINGDIRECTORY/deb/

          dput ppa:quamotion/ppa ../${package}_${package_version}-${version_number}-0${DIST}_source.changes
          cd ..
      done
    displayName: Build Debian archives
  - script: |
      rm -rf /tmp/gpg_passphrase
    displayName: 'Cleanup GPG key'
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/deb'
      artifactName: 'deb'
      publishLocation: 'Container'
    displayName: Publish

- job: rpm
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      project: 'imobiledevice-net'
      pipeline: $(imobiledevicenetPipeline)
      buildVersionToDownload: 'specific'
      buildId: $(imobiledevicenetBuild)
      downloadType: 'single'
      artifactName: 'sources'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Download sources'
  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'specific'
      project: 'imobiledevice-net'
      pipeline: $(imobiledevicenetPipeline)
      buildVersionToDownload: 'specific'
      buildId: $(imobiledevicenetBuild)
      downloadType: 'single'
      artifactName: 'imobiledevice-net'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: 'Download imobiledevice-net artifacts'
  - script: |
      sudo apt-get install -y osc libxml2-utils
    displayName: 'Install dependencies'
  - script: |
      echo "[general]" > ~/.oscrc
      echo "apiurl = https://api.opensuse.org" >> ~/.oscrc
      echo "[https://api.opensuse.org]" >> ~/.oscrc
      echo "user = $OSC_USER" >> ~/.oscrc
      echo "pass = $OSC_PASSWORD" >> ~/.oscrc
    displayName: 'Configure OSC'
  - script: |
      set -e
      version_number=`xmllint --xpath 'Project/PropertyGroup/MobileDeviceDotNetNuGetVersion/text()' $SYSTEM_ARTIFACTSDIRECTORY/imobiledevice-net/Directory.Build.props`

      mkdir -p $BUILD_ARTIFACTSTAGINGDIRECTORY/osc
      cd $BUILD_ARTIFACTSTAGINGDIRECTORY/osc
      osc checkout home:qmfrederik

      declare -A package_versions
      declare -A package_baseline_versions
      package_versions=( ["libplist"]="2.0.2" ["libusbmuxd"]="1.12.0" ["libimobiledevice"]="1.2.2" ["usbmuxd"]="1.1.2")
      package_baseline_versions=( ["libplist"]="2.0.1" ["libusbmuxd"]="1.1.0" ["libimobiledevice"]="1.2.1" ["usbmuxd"]="1.1.0")

      for package in libplist libusbmuxd libimobiledevice usbmuxd
      do
          package_version=${package_versions[$package]}
          package_baseline_version=${package_baseline_versions[$package]}

          echo Packaging ${package}_${package_version}.${version_number}

          # Repackage the .tar.gz file so that the top-level directory is named ${package}-${package_version}.${version_number}
          cd $SYSTEM_ARTIFACTSDIRECTORY/sources/
          mkdir -p ${package}-${package_version}.${version_number}
          tar -C ${package}-${package_version}.${version_number} -xvzf $package.orig.tar.gz
          tar -cvf ${package}-${package_version}.${version_number}.tar.gz ${package}-${package_version}.${version_number}

          cd $BUILD_ARTIFACTSTAGINGDIRECTORY/osc/home\:qmfrederik/$package/
          osc rm *

          cp $SYSTEM_ARTIFACTSDIRECTORY/sources/$package-${package_version}.${version_number}.tar.gz ./${package}-${package_version}.${version_number}.tar.gz
          tar -xvzf $SYSTEM_ARTIFACTSDIRECTORY/sources/$package.orig.tar.gz ${package}.spec
          
          sed -i "s/${package_baseline_version}.build/${package_version}.${version_number}/" ${package}.spec
          cat ${package}.spec
          osc add *
          osc commit -m "Version ${package}_${package_version}.${version_number} - Azure Pipelines ${BUILD_BUILDNUMBER}"
      done
    displayName: Update OSC archives
  - script: |
      rm -rf ~/.oscrc
    displayName: 'Cleanup OSC key'
